#!/usr/bin/env ruby
require 'yaml'
require 'optparse'

def read_pairs_config
  pairs_file_path = nil
  candidate_file_path = '.pairs'
  until pairs_file_path || File.expand_path(candidate_file_path) == '/.pairs' do
    if File.exists?(candidate_file_path)
      pairs_file_path = candidate_file_path
    else
      candidate_file_path = File.join("..", candidate_file_path)
    end
  end

  unless pairs_file_path
    puts <<-INSTRUCTIONS
Could not find a .pairs file. Create a YAML file in your project or home directory.
Format: <initials>: <name>[; <email>]
Example:
# .pairs - configuration for 'git pair'
# place in project or home directory
pairs:
  eh: Edward Hieatt
  js: Josh Susser; jsusser
  sf: Serguei Filimonov; serguei
email:
  prefix: pair
  domain: pivotallabs.com
INSTRUCTIONS
    exit(1)
  end
  pairs_file_path ? YAML.load_file(pairs_file_path) : {}
end

def read_author_info_from_config(config, initials)
  initials.map do |initials|
    if full_name = config['pairs'][initials.downcase]
      full_name
    else
      puts "Couldn't find author name for initials: #{initials}. Add this person to the .pairs file in your project or home directory."
      exit 1
    end
  end
end

def build_email(emails, config)
  if config.is_a?(Hash)
    prefix = config['prefix'] if !config['no_solo_prefix'] or emails.size > 1
    "#{([prefix] + emails).compact.join('+')}@#{config['domain']}"
  else
    config
  end
end

def set_git_config(options)
  options.each do |key,value|
    key = "user.#{key}"
    value = value ? %Q{#{key} "#{value}"} : "--unset #{key}"
    system(%Q{git config --file ~/.gitconfig.pair #{value}})
  end
end

def report_git_settings(key)
  global = `git config  --file ~/.gitconfig.pair --get-regexp '^user\.#{key}'`
  puts "global: #{global}"
end

def extract_author_names_and_email_ids_from_config(config, initials)
  authors = read_author_info_from_config(config, initials)
  authors.sort!.uniq!
  authors.map do |a|
    full_name, email_id = a.split(";").map(&:strip)
    email_id ||= full_name.split(' ').first.downcase
    [full_name, email_id]
  end.transpose
end

def no_email(config)
   !config.key? 'email'
end

def set_ssh_users(initials)
  `ssh-add -D &>/dev/null`
  initials.each do |id|
    key_path = "#{ENV['HOME']}/.ssh/user_keys/#{id}"
    unless File.exist? key_path
      system "figlet -w $(tput cols) Generate Your Key, #{id}"
      puts "Be sure to add a password if you don't want people pretending to be you."
      `ssh-keygen -f #{key_path}`
      system "pbcopy < #{key_path}.pub"
      puts "Now add the #{key_path}.pub to your gitlab profile...it's already in your clipboard.\n\n"
      puts "    https://gitlab.asynchrony.com/profile/keys/new\n\n"
    end
    system "figlet -w $(tput cols) 'Adding:      #{id}'"
    `ssh-add -t #{ 60 * 60 * 8 } #{key_path}`
  end
end

initials = ARGV
config = read_pairs_config

if initials.any?
  author_names, email_ids = extract_author_names_and_email_ids_from_config(config, initials)
  authors = [author_names[0..-2].join(", "), author_names.last].reject(&:empty?).join(" and ")
  git_config = {:name => authors,  :initials => initials.sort.join(" ")}
  git_config[:email] = build_email(email_ids, config["email"]) unless no_email(config)
  set_git_config  git_config
  set_ssh_users initials
end

[:name, :email, :initials].each do |key|
  report_git_settings(key)
end
